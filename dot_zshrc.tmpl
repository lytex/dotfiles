# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS=true

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(z zsh-autosuggestions sudo command-not-found
zsh-interactive-cd zsh-syntax-highlighting fzf zpy)

source $ZSH/oh-my-zsh.sh

# User configuration
# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

alias doom=~/.config/emacs/bin/doom

source "$HOME/.zsh/plugins/zsh-system-clipboard/zsh-system-clipboard.zsh"

export NVIM_LOG_FILE="$HOME/.nvimlog"

alias my-fzf-command='fzf --height=20% --preview-window=noborder --border=top --info=inline'

function fzf-cd-places () {
    directory=$(cat ~/.local/share/user-places.xbel | grep -F 'bookmark href="file:///' | sed -E 's#[ ]*<bookmark href="file://([^"]+)">#\1#' | sed 's/%/\\\\x/g' | sort -u | xargs -I _ printf "_\n" |  my-fzf-command --preview "eza --color=always -w $(( $(brltty-ttysize | awk -Fx '{print $1}')/2 )) {}")
    RBUFFER=" '${directory}'${RBUFFER}"
}

# Tag navigation
function fzf-cd-tags () {
    tag=$(cat ~/.local/share/user-places.xbel | grep -F 'bookmark href="tags:/' | grep -vF ' <bookmark href="tags:/">' | sed -E 's#[ ]*<bookmark href="tags:/([^"]+)">#\1#' | sort -u | my-fzf-command --preview 'baloosearch tag:{} | sort -u'); directory=$(baloosearch tag:$tag | sort -u | my-fzf-command --preview "eza --color=always -w $(( $(brltty-ttysize | awk -Fx '{print $1}')/2 )) {}")
    RBUFFER=" '${directory}'${RBUFFER}"
}
zle -N fzf-cd-tags
zle -N fzf-cd-places

autoload -U edit-command-line
zle -N edit-command-line

bindkey -v
bindkey -a ' .' fzf-file-widget # Maybe ' fz' ?
bindkey -a ' c' fzf-cd-widget
bindkey -a ' r' fzf-history-widget
bindkey -a ' f' fzf-history-widget
bindkey -a ' p' fzf-cd-places
bindkey -a ' t' fzf-cd-tags
bindkey -a '  ' edit-command-line

function tag() {
    setfattr -n user.xdg.tags -v "$@"
    (setsid baloo_reset &) > /dev/null # Clean cache, non-blocking, to trigger baloo reindex
}

function gettag() {
    getfattr -n user.xdg.tags "$@" | grep -F "user.xdg.tags" | sed -e 's/user.xdg.tags=//' -e 's/"//g' 
}

function addtag {
    tag=$1
    shift 1
    all_tags=$(gettag "$@")
    new_tags=$(echo "$all_tags,$tag" | sed "s/,/\n/g" | sort -u | sed -z "s/\n/,/g" | sed 's/,$/\n/')
    tag "$new_tags" "$@"
}

function rmtag {
    tag=$1
    shift 1
    all_tags=$(gettag "$@")
    new_tags=$(echo "$all_tags" | sed -e "s/$tag,//" -e "s/,$tag$//" | sed "s/^$tag$//")
    tag "$new_tags" "$@"
}

# Moving a org-noter file to ~/org/roam while keeping a link
function pdflink {
    file="$@"
    mv "$file" "$HOME/org/roam"
    ln -s "$HOME/org/roam/$file" "$file"
}

export PYENV_ROOT=$ZPY_VENVS_HOME
eval "$(pyenv init -)"
# PATH=$(echo $PATH | sed "s#$PYENV_ROOT/shims##" | sed "s/::/:/g")

# Git alias copied from:
# https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git/git.plugin.zsh
# so that (in theory) I only put what I know and use
alias gds='git diff --staged'
alias gss='git status -s'
alias glp='git lg -p'
export GPG_TTY=$(tty) # Without this line, signed commits error out
# Custom alias
function gsp () {git stash && eval "$@ "&& git stash pop} # Surround a given function with stash and stash pop
alias gc-="git checkout -- ."
alias gc-f="git checkout -- . && git clean -fd"
function gsh () {git rebase -i HEAD~$1}
function gfo () {git fetch origin $1:$1}
function gsm () {git commit -S -m "$@"}
function g1 () {git --no-pager log -1 --format=%H | sed -z '$ s/\n$//' | xclip -sel clip} # Copy full hash of the current commit to clipboard
function setenv () {set -a; source ${1:-.env}; set +a;} # Set environment variables from an optional file, .env if not provided
function setenvf () {set -a; source $(find . -name '.env' | fzf --multi --preview 'bat {1} --language .env --color always || cat {1}'); set +a;} # Set environment variables finding all .env under current directory

function xptenv() {
   touch /tmp/nvim_tmux_session && chmod 600 /tmp/nvim_tmux_session
   touch /tmp/nvim_env && chmod 600 /tmp/nvim_env 
   export | grep -v ALACRITTY_SOCKET > /tmp/nvim_env
   if $TMUX; then
       tmux display-message -p '#I'> /tmp/nvim_tmux_session
    else
        echo "" > /tmp/nvim_tmux_session
    fi
}

eval $(thefuck --alias)
alias f=fuck
alias t=tldr
alias tb="command t" # From neomux
export PATH="$PATH:$HOME/.local/bin"
export PATH="$PATH:$HOME/.cargo/bin"
export PATH="$PATH:$HOME/.npm/bin"
alias c=chezmoi
alias n="$HOME/.local/bin/nvr_wrapper"
export EDITOR="nvr_wrapper"
export VISUAL="nvr_wrapper"

if [ "$TERM" = "xterm-kitty" ]; then
    alias ssh="kitty +kitten ssh"
fi

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

alias nvim-lazy="NVIM_APPNAME=LazyVim nvim"
alias nvim-kick="NVIM_APPNAME=kickstart nvim"
alias nvim-chad="NVIM_APPNAME=NvChad nvim"
alias nvim-astro="NVIM_APPNAME=AstroNvim nvim"
alias nvim-lunar="NVIM_APPNAME=lvim nvim"

# Neovim configuration switcher
# https://gist.github.com/elijahmanor/b279553c0132bfad7eae23e34ceb593b
function nvims() {
  items=("default" "kickstart" "LazyVim" "NvChad" "AstroNvim")
  config=$(printf "%s\n" "${items[@]}" | fzf --prompt=" Neovim Config  " --height=~50% --layout=reverse --border --exit-0)
  if [[ -z $config ]]; then
    echo "Nothing selected"
    return 0
  elif [[ $config == "default" ]]; then
    config=""
  fi
  NVIM_APPNAME=$config nvim $@
}

# fix issue with tmux: https://github.com/zsh-users/zsh-autosuggestions/issues/229
if [ ! "$TMUX" = "" ]; then export TERM=xterm-256color; fi
export SHELL=/bin/zsh
export ET_NO_TELEMETRY=false

__tmux_fzf_get_session__() {
    session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null |
        fzf --exit-0 --preview='tmux_tree {}')
    echo "$session"
}

# Tmux session switcher (`tms foo` attaches to `foo` if exists, else creates it)
tms() {
    [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
    if [[ -n "$1" ]]; then
        if [[ "$1" == "-ask" ]]; then
            read -r "?New tmux session name: " session_name
        else
            session_name="$1"
        fi
        tmux $change -t "$session_name" 2>/dev/null || \
            (tmux new-session -d -s "$session_name" && \
            tmux $change -t "$session_name");
        return
    fi
    session=$(eval __tmux_fzf_get_session__)
    tmux $change -t "$session" || echo "No sessions found."
}

function launch_script_in_session_window() {
        session=$1
        window=$2
        shift 2
        if tmux list-windows -t "$session"; then
            tmux neww -t "$session": -n "$window" -d "$@"
        else
            tmux new -s "$session" -n "$window" -d "$@"
        fi
}


function jl(){
    last=$(tmux list-windows -t jupyter | sed -E "s/.+jupyter_([0-9]+).+/\1/" | sort -nr | head -n 1)
    last=${last:=8887}
    next=$((last+1))
    launch_script_in_session_window jupyter jupyter_$next "$@ pip3 uninstall -y jupyter jupyter_core jupyter-client \
    jupyter-console notebook qtconsole nbconvert nbformat && \
    pip3 install jupyter jupyter_core jupyter-client jupyter-console notebook qtconsole nbconvert nbformat && \
    jupyter lab" 
}

function ipykernel-create() {
    pip install tornado ipykernel
    ipython kernel install --user --name=$1
}


function ipykernel-remove() {
    jupyter kernelspec uninstall $1
}

function ipykernel-list() {
    jupyter kernelspec list | awk -n 'NR >= 2 {print $2}' | \
        xargs -I _ /bin/bash -c "echo -e \"\u001b[36;1m\" && ls -1 _/kernel.json && echo -en \"\u001b[0m\" && cat _/kernel.json | jq && echo"
}

function ipykernel-cache() {
    find . -iname "metadata.json" | xargs -I _ bash -c "echo -e \"\u001b[36;1m_\" && echo -en \"\u001b[0m\"  && cat _ | jq && echo" \;
}

function get-venv() {
    echo $PATH | awk -F : '{print $1}' | xclip -sel clip
}

function zpy-list() {
for dir in ~/.local/share/venvs/*; do
    echo -en "\u001b[36;1m$dir\u001b[32;1m $(readlink $dir/project)\u001b[0m\n";
done | grep -v -e shims -e versions
}

function zpy-big() {
    du -d 0 -h /home/julian/.local/share/venvs/* | sort -hr | xargs -I _ bash -c \
    'echo -en "\\u001b[36;1m_\\u001b[32;1m"; echo _ | sed -E "s%^[^ ]+%%"; ' | grep -v -e versions -e shims
}

function zpy-env() {
    ln -s "$(dirname $(dirname $(which python)))" "$ZPY_VENVS_HOME/$(md5sum <<< $PWD | awk '{print $1}')/venv" 
}

function zpy-rm() {
    rm -rf "$ZPY_VENVS_HOME/$(md5sum <<< $PWD | awk '{print $1}')/venv" 
}

function zpy-check() {
    # Checks requirements.txt. When using local user packages, pip-tools can pick local user versions instead of venv versions
    eval $(cat requirements.txt | sed -E 's/==.+//;s/^/-e ^/' | tr '\n' ' ' | sed -E 's/^/pip freeze | grep /')
}

function pipenv () {shift; eval "$@"}

alias ccd='cd $(chezmoi source-path)'

alias copy="sed -z '$ s/\n$//' | xclip -sel clip"
alias past="xclip -sel clip -out"

function addpro () {

    # Optional argument -w to specify workspace, -i to make interactive (also allows)
    while getopts "w:i" opt; do
        case ${opt} in
            w)
                workspace=w"${OPTARG:-0}"
                ;;
            i)
                workspace=w$(awk -F = '{print substr($3, 2)}'  ~/.local/share/nvim/telescope-projects.txt | sort -u | fzf --bind=enter:replace-query+print-query)
                ;;
            ,*)
                ;;
        esac
    done

    projects_file="${XDG_DATA_HOME:-$HOME/.local/share}/nvim/telescope-projects.txt"
    if ! grep "=$PWD=" "$projects_file"; then
        name=${PWD##*/}
        echo -n "$name=$PWD=$workspace=1=$(date +%s)" >> $projects_file
    fi


    {{ if .work }}
    file_contents=$(gpg --decrypt $HOME/.local/share/chezmoi/dot_local/share/private_nvim/encrypted_telescope-projects-work.txt.tmpl.asc) 
    {{ else }}
    file_contents=$(gpg --decrypt $HOME/.local/share/chezmoi/dot_local/share/private_nvim/encrypted_telescope-projects-personal.txt.tmpl.asc) 
    {{ end }}
    if ! ( echo $file_contents | grep "=$PWD="); then
        chezmoi_gpg=$(cat $HOME/.config/chezmoi/chezmoi.toml | grep "recipient" | sed -E 's/\s*recipient\s*=\s*"(.+)"/\1/')
        name=${PWD##*/}
        awk_cmd="/$(echo $PWD | sed 's%/%\\\\/%g')"'/{print $5}'
        # Since this file is a template, this is needed to prevent the brackets from being interpreted as templates themselves
        # https://github.com/twpayne/chezmoi/discussions/1706
        open_bracket='{{ "{{" }}'
        closing_bracket='{{ "}}" }}'
        # Interpret output literally with -E
        echo -En "$file_contents
$name=$PWD=$workspace=1=$open_bracket output \"awk\" \"-F\" \"=\" \"$awk_cmd\"  \"/home/julian/.local/share/nvim/telescope-projects.txt\" | trim $closing_bracket" | \
            gpg --encrypt --armor --recipient  $chezmoi_gpg > \
            {{ if .work }}$HOME/.local/share/chezmoi/dot_local/share/private_nvim/encrypted_telescope-projects-work.txt.tmpl.asc{{ else }}$HOME/.local/share/chezmoi/dot_local/share/private_nvim/encrypted_telescope-projects-personal.txt.tmpl.asc{{ end }}

    fi
}

function addpass () {
    cat "$@" | pass insert -m "$PWD/$@"
}

function darkmode () {
    plasma-apply-colorscheme BreezeDark
    plasma-apply-lookandfeel -a org.kde.breezedark.desktop
    plasma-apply-desktoptheme breeze-dark

    plasma-apply-cursortheme Quintom_Ink
    chezmoi apply ~/.config/alacritty/alacritty.*
    chezmoi apply ~/.config/i3/config
    i3 reload
}

function lightmode () {
    plasma-apply-colorscheme BreezeLight
    plasma-apply-lookandfeel -a org.kde.breeze.desktop
    plasma-apply-desktoptheme breeze-light

    plasma-apply-cursortheme Quintom_Ink
    chezmoi apply ~/.config/alacritty/alacritty.*
    chezmoi apply ~/.config/i3/config
    i3 reload
}

function arup () {
    # Fuzzy find for a program while showing info of the package
    paru -Ss $1 | grep -v '   '  | fzf --multi --preview 'paru -Si {1}' | awk '{print $1}' | xargs -ro paru -S
}

function rf () {
    # refile but for files
    mv $1 $2
    ln -s $2 $1
}
function mkcdir () {
    # mkdir and cd all in one
    mkdir -p -- "$1" &&
       cd -P -- "$1"
}

function lvim() {
    if (($# > 0)); then
        command lvim ~/.config/lvim/config.lua +:w "$@" +:next
    else
        command lvim ~/.config/lvim/config.lua +:w +:bd
    fi
}
{{ if .work }}
alias k=kubectl
alias kx=kubectx
source <(kubectl completion zsh)
alias g=gcloud
# The next line updates PATH for the Google Cloud SDK.
if [ -f '/home/julian/.local/share/google-cloud-sdk/path.zsh.inc' ]; then . '/home/julian/.local/share/google-cloud-sdk/path.zsh.inc'; fi
# The next line enables shell command completion for gcloud.
if [ -f '/home/julian/.local/share/google-cloud-sdk/completion.zsh.inc' ]; then . '/home/julian/.local/share/google-cloud-sdk/completion.zsh.inc'; fi

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
{{ end }}

PATH=$(echo $PATH | sed -E 's/::+/:/g')
# Remove PATH for nvim terminals
if [ $VIRTUAL_ENV ] && [ $PATH_INJECTION ]; then
    zpy_hash=$(md5sum <<< $PWD | awk '{print $1}')
    unset VIRTUAL_ENV
    export PATH=$(echo $PATH | sed "s%$ZPY_VENVS_HOME/$zpy_hash/venv/bin:%%g")
fi

if [ $PATH_INJECTION ]; then
    export PATH="$PATH:$HOME/.local/bin/alacritty_$$"
    export PATH_INJECTION_PID=$$
fi
# vim: sw=4 ts=4 wm=4 et ft=zsh
